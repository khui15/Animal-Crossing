{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/biom9450-sql/","result":{"data":{"markdownRemark":{"html":"<h1>SQL</h1>\n<hr>\n<ol>\n<li>Query crash course</li>\n<li>Joins</li>\n<li>Subqueries</li>\n<li>\n<h2>Useful links</h2>\n<h1>Query crash course</h1>\n</li>\n</ol>\n<p>The general structure for SQL queries is:</p>\n<pre><code class=\"language-SQL\">  SELECT {_field_name_} # select what...\n  FROM {_table__name_}  # from where...\n  WHERE {condition}     # based on...\n  SORT TYPE\n</code></pre>\n<p>It may also be worth nothing that SQL is not case sensitive (for the most part).</p>\n<h2>Conditions</h2>\n<p>Conditions can be one of the following:</p>\n<ol>\n<li>\n<p>Comparisons</p>\n<p><em>eg</em>. <code>&#x3C;</code>, <code>></code>, <code>&#x3C;></code>, <code>BETWEEN</code></p>\n</li>\n<li>\n<p>Missing data</p>\n<p><em>eg</em>. <code>IS NULL</code></p>\n</li>\n<li>\n<p>Not</p>\n<p><em>eg</em>. <code>IS NOT NULL</code></p>\n</li>\n</ol>\n<p>Multiple conditions can be enforced by using boolean logic such as <code>AND</code>, <code>OR</code>, <code>NOT</code>.</p>\n<p>Set logic can also be used to define a condtion such as <code>IN</code>.</p>\n<h2>Sort type</h2>\n<p>The results obtained from the query can be ordered and group using the following syntax:</p>\n<h3>Order by</h3>\n<p>Ordering set based on the field to order by, as well as whether to sort by in ascending or descending order. The order will be done alphabetically or numerically, based on the data type of the field.</p>\n<pre><code class=\"language-SQL\">  SELECT {_field_name_}\n  FROM {_table__name_}\n  WHERE {condition}\n  ORDER BY {_field_name_} {asc/desc}\n</code></pre>\n<h3>Group by</h3>\n<h2>Field</h2>\n<p>Field names can have the <code>DISTINCT</code> attribute placed before it to ensure that only one of each field is queried. </p>\n<p>Calculations can also  be done on the field, such as <code>COUNT</code> and <code>AVG</code>.</p>\n<hr>\n<h1>Joins</h1>\n<p>Queries can be made across multiple tables using joins. Joint queries look like the following:</p>\n<pre><code class=\"language-SQL\">  SELECT {_field_name_}\n  FROM {_table1__name_}\n  JOIN {_table2_name_} ON {_condition_}\n  WHERE {condition}\n  ORDER BY {_field_name_} {asc/desc}\n</code></pre>\n<p>There are four main types of joins:</p>\n<ul>\n<li><strong>Inner join</strong>: obtain entries where the condition applies to both table1 and table2</li>\n<li><strong>Outer join</strong>: obtain entries where the condition does not applies to both table1 and table2</li>\n<li><strong>Left join</strong>: obtain entries where the condition applies to both table1 and table2 as well as all entries in table1</li>\n<li><strong>Right join</strong>: obtain entries where the condition applies to both table1 and table2 as well as all entries in table2</li>\n</ul>\n<hr>\n<h1>Subqueries and unions</h1>\n<hr>\n<h1>Useful links</h1>\n<p>The quickest way to get a hang of SQL is to pratice. The way I learnt SQL was basically by completing multiple <a href=\"https://www.hackerrank.com/domains/sql\">HackerRank exercises</a>. I suggest compeleting a few until you get the hang of it. Note that the questions do get harder as you go along. Also, don't forget to change the language to <code>MS SQL Server</code>.</p>","frontmatter":{"date":"11 September, 2020","title":"BIOM9450 - SQL","featuredImage":null}}},"pageContext":{"slug":"/biom9450-sql/"}}}